KMD
00000000: EA00007D    ;         B part3 ; part1 or part2 or part3
00000004:             ; 
00000004: 00 00 00 00 ; buffer  DEFS 100,0
00000008: 00 00 00 00 ; 
0000000C: 00 00 00 00 ; 
00000010: 00 00 00 00 ; 
00000014: 00 00 00 00 ; 
00000018: 00 00 00 00 ; 
0000001C: 00 00 00 00 ; 
00000020: 00 00 00 00 ; 
00000024: 00 00 00 00 ; 
00000028: 00 00 00 00 ; 
0000002C: 00 00 00 00 ; 
00000030: 00 00 00 00 ; 
00000034: 00 00 00 00 ; 
00000038: 00 00 00 00 ; 
0000003C: 00 00 00 00 ; 
00000040: 00 00 00 00 ; 
00000044: 00 00 00 00 ; 
00000048: 00 00 00 00 ; 
0000004C: 00 00 00 00 ; 
00000050: 00 00 00 00 ; 
00000054: 00 00 00 00 ; 
00000058: 00 00 00 00 ; 
0000005C: 00 00 00 00 ; 
00000060: 00 00 00 00 ; 
00000064: 00 00 00 00 ; 
00000068:             ; 
00000068: 6F 6E 65 00 ; s1      DEFB "one\0"
0000006C:             ;         ALIGN
0000006C: 74 77 6F 00 ; s2      DEFB "two\0"
00000070:             ;         ALIGN
00000070: 74 68 72 65 ; s3      DEFB "three\0"
00000074: 65 00       ; 
00000078:             ;         ALIGN
00000078: 66 6F 75 72 ; s4      DEFB "four\0"
0000007C: 00          ; 
00000080:             ;         ALIGN
00000080: 66 69 76 65 ; s5      DEFB "five\0"
00000084: 00          ; 
00000088:             ;         ALIGN
00000088: 73 69 78 00 ; s6      DEFB "six\0"
0000008C:             ;         ALIGN
0000008C: 73 65 76 65 ; s7      DEFB "seven\0"
00000090: 6E 00       ; 
00000094:             ;         ALIGN
00000094: 74 77 65 6E ; s8      DEFB "twentytwo\0"
00000098: 74 79 74 77 ; 
0000009C: 6F 00       ; 
000000A0:             ;         ALIGN
000000A0: 74 77 65 6E ; s9      DEFB "twenty\0"
000000A4: 74 79 00    ; 
000000A8:             ;         ALIGN
000000A8:             ; 
000000A8:             ; ;************************** part 1 **************************
000000A8:             ; printstring
000000A8:             ; 
000000A8: E4D10001    ; start   LDRB R0, [R1], #1
000000AC: E3500000    ;                 CMP R0, #0
000000B0: 1F000000    ;                 SVCNE 0
000000B4: 1AFFFFFB    ;                 BNE start 
000000B8:             ; 
000000B8:             ; ; your code goes here, replacing the previous 2 lines
000000B8: E3A0000A    ;         MOV  R0, #10    ; given - output end-of-line
000000BC: EF000000    ;         SVC  0          ; given
000000C0: E1A0F00E    ;         MOV  PC, LR     ; given
000000C4:             ; 
000000C4:             ; ;************************** part 2 ***************************
000000C4:             ; strcat
000000C4:             ; ; your code goes here
000000C4: E4D10001    ; cat     LDRB R0, [R1], #1
000000C8: E3500000    ;                 CMP R0, #0
000000CC: 1AFFFFFC    ;                 BNE cat
000000D0:             ; 
000000D0: E2411001    ;                 SUB R1, R1, #1
000000D4: E4D20001    ; cattwo  LDRB R0, [R2], #1
000000D8: E4C10001    ;                 STRB R0, [R1], #1
000000DC: E3500000    ;                 CMP R0, #0
000000E0: 1AFFFFFB    ;                 BNE cattwo
000000E4: E1A0F00E    ;                 MOV PC, LR
000000E8:             ; 
000000E8:             ; strcpy
000000E8:             ; ; your code goes here
000000E8: E4D20001    ; cpystart        LDRB R0, [R2], #1
000000EC: E4C10001    ;                         STRB R0, [R1], #1
000000F0: E3500000    ;                         CMP R0, #0
000000F4: 1AFFFFFB    ;                         BNE cpystart
000000F8: E1A0F00E    ;                         MOV  PC, LR 
000000FC:             ; 
000000FC:             ; ;************************** part 3 **************************
000000FC: E58FE028    ; sorted  STR LR, return2 ; given
00000100:             ; ; your code goes here
00000100: E4D24001    ; sortstart       LDRB R4, [R2], #1
00000104: E4D35001    ;                         LDRB R5, [R3], #1
00000108: E3540030    ;                         CMP  R4, #48
0000010C: 0A000004    ;                         BEQ  exit
00000110: E3550030    ;                         CMP  R5, #48
00000114: 0A000002    ;                         BEQ  exit
00000118: E1540005    ;                         CMP  R4, R5
0000011C: 1A000000    ;                         BNE  exit
00000120: EAFFFFF6    ;                         B        sortstart
00000124:             ; 
00000124:             ; exit
00000124: E1540005    ; CMP R4, R5
00000128: E51FF004    ; LDR  PC, return2 ; given
0000012C: 00000000    ; return2 DEFW 0          ; given
00000130:             ; 
00000130:             ; ;*********************** the various parts ********************
00000130: E24F10D0    ; part1   ADR R1, s1
00000134: EBFFFFDB    ;         BL  printstring
00000138: E24F10D4    ;         ADR R1, s2
0000013C: EBFFFFD9    ;         BL  printstring
00000140: E24F10D8    ;         ADR R1, s3
00000144: EBFFFFD7    ;         BL  printstring
00000148: E24F10D8    ;         ADR R1, s4
0000014C: EBFFFFD5    ;         BL  printstring
00000150: E24F10D8    ;         ADR R1, s5
00000154: EBFFFFD3    ;         BL  printstring
00000158: E24F10D8    ;         ADR R1, s6
0000015C: EBFFFFD1    ;         BL  printstring
00000160: E24F10DC    ;         ADR R1, s7
00000164: EBFFFFCF    ;         BL  printstring
00000168: E24F10DC    ;         ADR R1, s8
0000016C: EBFFFFCD    ;         BL  printstring
00000170: E24F10D8    ;         ADR R1, s9
00000174: EBFFFFCB    ;         BL  printstring
00000178: EF000002    ;         SVC 2
0000017C:             ; 
0000017C: E24F2F47    ; part2   ADR R2, s1
00000180: E24F1F61    ;         ADR R1, buffer
00000184: EBFFFFD7    ;         BL  strcpy
00000188: E24F1F63    ;         ADR R1, buffer
0000018C: EBFFFFC5    ;         BL  printstring
00000190: E24F2F4B    ;         ADR R2, s2
00000194: E24F1F66    ;         ADR R1, buffer
00000198: EBFFFFC9    ;         BL  strcat
0000019C: E24F1E1A    ;         ADR R1, buffer
000001A0: EBFFFFC0    ;         BL  printstring
000001A4: E24F2F4F    ;         ADR R2, s3
000001A8: E24F1F6B    ;         ADR R1, buffer
000001AC: EBFFFFC4    ;         BL  strcat
000001B0: E24F1F6D    ;         ADR R1, buffer
000001B4: EBFFFFBB    ;         BL  printstring
000001B8: EF000002    ;         SVC 2
000001BC:             ; 
000001BC:             ; ; used by part3
000001BC: 00000000    ; return4 DEFW 0,0
000001C0: 00000000    ; 
000001C4: E50FE010    ; test2   STR LR, return4         ; This mechanism will be improved later
000001C8: E50F3010    ;         STR R3, return4+4       ; Assembler will evaluate addition      
000001CC: E1A00002    ;         MOV R0, R2
000001D0: EF000003    ;         SVC 3
000001D4: EBFFFFC8    ;         BL  sorted
000001D8: B3A0003C    ;         MOVLT R0, #'<'          ; Three-way IF using conditions
000001DC: 03A0003D    ;         MOVEQ R0, #'='
000001E0: C3A0003E    ;         MOVGT R0, #'>'
000001E4: EF000000    ;         SVC 0
000001E8: E51F0030    ;         LDR R0, return4+4
000001EC: EF000003    ;         SVC 3
000001F0: E3A0000A    ;         MOV R0, #10
000001F4: EF000000    ;         SVC 0
000001F8: E51FF044    ;         LDR PC, return4
000001FC:             ; 
000001FC: E24F2F67    ; part3   ADR R2, s1
00000200: E24F3F67    ;         ADR R3, s2
00000204: EBFFFFEE    ;         BL  test2
00000208: E24F2F69    ;         ADR R2, s2
0000020C: E24F3F69    ;         ADR R3, s3
00000210: EBFFFFEB    ;         BL  test2
00000214: E24F2F6B    ;         ADR R2, s3
00000218: E24F3F6A    ;         ADR R3, s4
0000021C: EBFFFFE8    ;         BL  test2
00000220: E24F2E1B    ;         ADR R2, s4
00000224: E24F3F6B    ;         ADR R3, s5
00000228: EBFFFFE5    ;         BL  test2
0000022C: E24F2F6D    ;         ADR R2, s5
00000230: E24F3E1B    ;         ADR R3, s6
00000234: EBFFFFE2    ;         BL  test2
00000238: E24F2F6E    ;         ADR R2, s6
0000023C: E24F3F6E    ;         ADR R3, s7
00000240: EBFFFFDF    ;         BL  test2
00000244: E24F2D07    ;         ADR R2, s7
00000248: E24F3F6F    ;         ADR R3, s8
0000024C: EBFFFFDC    ;         BL  test2
00000250: E24F2F71    ;         ADR R2, s8
00000254: E24F3F6F    ;         ADR R3, s9
00000258: EBFFFFD9    ;         BL  test2
0000025C: E24F2E1D    ;         ADR R2, s8
00000260: E24F3F75    ;         ADR R3, s8
00000264: EBFFFFD6    ;         BL  test2
00000268: EF000002    ;         SVC 2
0000026C:             ; 

Symbol Table: Labels
: buffer                            00000004  Local -- ARM
: s1                                00000068  Local -- ARM
: s2                                0000006C  Local -- ARM
: s3                                00000070  Local -- ARM
: s4                                00000078  Local -- ARM
: s5                                00000080  Local -- ARM
: s6                                00000088  Local -- ARM
: s7                                0000008C  Local -- ARM
: s8                                00000094  Local -- ARM
: s9                                000000A0  Local -- ARM
: printstring                       000000A8  Local -- ARM
: start                             000000A8  Local -- ARM
: strcat                            000000C4  Local -- ARM
: cat                               000000C4  Local -- ARM
: cattwo                            000000D4  Local -- ARM
: strcpy                            000000E8  Local -- ARM
: cpystart                          000000E8  Local -- ARM
: sorted                            000000FC  Local -- ARM
: sortstart                         00000100  Local -- ARM
: exit                              00000124  Local -- ARM
: return2                           0000012C  Local -- ARM
: part1                             00000130  Local -- ARM
: part2                             0000017C  Local -- ARM
: return4                           000001BC  Local -- ARM
: test2                             000001C4  Local -- ARM
: part3                             000001FC  Local -- ARM
