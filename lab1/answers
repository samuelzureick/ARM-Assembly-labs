Part 1

Q1) After obeying the "LDR R0" instruction, the value of PC is (4) and of R0
is (0).

Q2) After obeying the "LDR R1" instruction, the value of PC is (8) and of R1
is (4)

Q3) After obeying the "LDR R2" instruction, the value of PC is (C) and of R2
is (3)


(For Q4 and Q5, I am asking about the registers involved in the arithmetic,
not PC/R15)

Q4) The first time the "ADD" instruction is obeyed, the value of register (R0)
changes from (0) to (4)

Q5) The first time the "SUB" instruction is obeyed, the value of register (R2)
changes from (3) to (2)


(For Q6, Q7, and Q8, I am asking about the effect of running the program
from the beginning until it stops at the SWI instruction, not about the
effect of just one instruction)

Q6) the "BNE" instruction is obeyed (3) times but only performs the branch (2)
times

Only 2 registers (other than the PC register) change value: R0, R2

Q7) register (R2) counts down from (3) to (0)

Q8) the final value of register (R0) is the (product) (hint: arithmetic operation) of memory locations (00000028) and (0000002c)


Part 2

Q9) The memory location for "tom" (changes from 30 to 34) because (the additional instruction comes before the DEFW statement in the program, pushing the memory address up by 4 bytes for tom.) 

Q10) If you reset and run the program again without reloading it then what
happens to the value of "tom" and why: (It changes to 18 because the value of r0 remains C at the start of the program because the value of tom was stored in register 0)
