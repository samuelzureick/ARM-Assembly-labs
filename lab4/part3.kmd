KMD
00000000:             ; ; COMP15111 lab 4 - Template file
00000000:             ; 
00000000:             ; print_char      equ     0               ; Define names to aid readability
00000000:             ; stop            equ     2
00000000:             ; print_str       equ     3
00000000:             ; print_no        equ     4
00000000:             ; 
00000000:             ; cLF             equ     10              ; Line-feed character
00000000:             ; 
00000000:             ; 
00000000: E28FD064    ;                 ADR     SP, _stack      ; set SP pointing to the end of our stack
00000004: EA000075    ;                 B       main
00000008:             ; 
00000008:             ;                 DEFS    100             ; this chunk of memory is for the stack
0000006C:             ; _stack                                  ; This label is 'just after' the stack space
0000006C:             ; 
0000006C:             ; 
0000006C: 54 68 69 73 ; wasborn         DEFB    "This person was born on ",0
00000070: 20 70 65 72 ; 
00000074: 73 6F 6E 20 ; 
00000078: 77 61 73 20 ; 
0000007C: 62 6F 72 6E ; 
00000080: 20 6F 6E 20 ; 
00000084: 00          ; 
00000085: 54 68 69 73 ; was             DEFB    "This person was ",0
00000089: 20 70 65 72 ; 
0000008D: 73 6F 6E 20 ; 
00000091: 77 61 73 20 ; 
00000095: 00          ; 
00000096: 20 6F 6E 20 ; on              DEFB    " on ",0
0000009A: 00          ; 
0000009B: 54 68 69 73 ; is              DEFB    "This person is ",0
0000009F: 20 70 65 72 ; 
000000A3: 73 6F 6E 20 ; 
000000A7: 69 73 20 00 ; 
000000AB: 20 74 6F 64 ; today           DEFB    " today!",0
000000AF: 61 79 21 00 ; 
000000B3: 54 68 69 73 ; willbe          DEFB    "This person will be ",0
000000B7: 20 70 65 72 ; 
000000BB: 73 6F 6E 20 ; 
000000BF: 77 69 6C 6C ; 
000000C3: 20 62 65 20 ; 
000000C7: 00          ; 
000000C8:             ;                 ALIGN
000000C8:             ; 
000000C8: 00000017    ; pDay              DEFW  23              ;  pDay = 23    //or whatever is todays date
000000CC: 0000000B    ; pMonth          DEFW    11              ;  pMonth = 11  //or whatever is this month
000000D0: 000007D5    ; pYear             DEFW  2005    ;  pYear = 2005 //or whatever is this year
000000D4:             ; 
000000D4:             ; 
000000D4:             ; ; def printAgeHistory (bDay, bMonth, bYear)
000000D4:             ; 
000000D4:             ; ; parameters
000000D4:             ; ;  R0 = bDay (on entry, moved to R6 to allow SVC to output via R0)
000000D4:             ; ;  R1 = bMonth
000000D4:             ; ;  R2 = bYear
000000D4:             ; ; local variables (callee-saved registers)
000000D4:             ; ;  R4 = year
000000D4:             ; ;  R5 = age
000000D4:             ; ;  R6 = bDay - originally R0
000000D4:             ; 
000000D4:             ; printAgeHistory 
000000D4: E92D0070    ;                 STMFD SP!, {R4-R6}
000000D8:             ;                 ;PUSH   {R6}                    ; callee saves three registers
000000D8:             ;                 ;PUSH   {R5}
000000D8:             ;                 ;PUSH   {R4}
000000D8:             ; 
000000D8:             ;                 ;LDR    R6, [SP, #(3 + 2) * 4]  ; Get parameters from stack
000000D8:             ;                 ;LDR    R1, [SP, #(3 + 1) * 4]
000000D8:             ;                 ;LDR    R2, [SP, #(3 + 0) * 4]
000000D8: E1A0600A    ;                 MOV R6, R10
000000DC: E1A0100B    ;                 MOV R1, R11
000000E0: E1A0200C    ;                 MOV R2, R12
000000E4:             ; 
000000E4:             ; ;   year = bYear + 1
000000E4: E2824001    ;                 ADD     R4, R2, #1
000000E8:             ; ;   age = 1;
000000E8: E3A05001    ;                 MOV     R5, #1
000000EC:             ; 
000000EC:             ; ; print("This person was born on " + str(bDay) + "/" + str(bMonth) + "/" + str(bYear))
000000EC: E24F0088    ;                 ADRL    R0, wasborn
000000F0: EF000003    ;                 SVC     print_str
000000F4: E1A00006    ;                 MOV     R0, R6
000000F8: E92D4000    ;                 push {LR}
000000FC: EB000026    ;                 BL printDate
00000100: E8BD4000    ;                 pop {LR}
00000104:             ; 
00000104:             ; ; this code does: while year < pYear //{
00000104: E51F003C    ; loop1   LDR     R0, pYear
00000108: E1540000    ;                 CMP     R4, R0
0000010C: 2A00000B    ;                 BHS     end1            ; Years are unsigned
00000110:             ; ; for part 4, should be changed to:
00000110:             ; ; while year < pYear or
00000110:             ; ;                               (year == pYear and bMonth < pMonth) or
00000110:             ; ;                               (year == pYear and bMonth == pMonth and bDay < pDay):
00000110:             ; 
00000110:             ; ;  print("This person was " + str(age) + " on " + str(bDay) + "/" + str(bMonth) + "/" + str(yea
                      ; r))
00000110: E24F0093    ;                 ADRL    R0, was
00000114: EF000003    ;                 SVC     print_str
00000118: E1A00005    ;                 MOV     R0, R5
0000011C: EF000004    ;                 SVC     print_no
00000120: E24F0092    ;                 ADRL    R0, on
00000124: EF000003    ;                 SVC     print_str
00000128: E92D4000    ;                 push {LR}
0000012C: EB00001A    ;                 BL printDate
00000130: E8BD4000    ;                 pop {LR}
00000134:             ; 
00000134:             ;                 ; year = year + 1
00000134: E2844001    ;                 ADD     R4, R4, #1
00000138:             ;                 ; age = age + 1
00000138: E2855001    ;                 ADD     R5, R5, #1
0000013C:             ;                 ; //}
0000013C: EAFFFFF0    ;                 B       loop1
00000140:             ; 
00000140:             ; end1
00000140:             ; ; this code does: if (bMonth == pMonth):
00000140:             ; ; for part 4, should be changed to:
00000140:             ; ; if (bMonth == pMonth and bDay == pDay):
00000140: E51F007C    ;                 LDR     R0, pMonth
00000144: E1510000    ;                 CMP     R1, R0
00000148: 1A000008    ;                 BNE     else1
0000014C:             ; 
0000014C:             ; ; print("This person is " + str(age) + " today!")
0000014C: E24F00B9    ;                 ADRL    R0, is
00000150: EF000003    ;                 SVC     print_str
00000154: E1A00005    ;                 MOV     R0, R5
00000158: EF000004    ;                 SVC     print_no
0000015C: E24F00B9    ;                 ADRL    R0, today
00000160: EF000003    ;                 SVC     print_str
00000164: E3A0000A    ;                 MOV     R0, #cLF
00000168: EF000000    ;                 SVC     print_char
0000016C:             ; 
0000016C:             ; ; else
0000016C: EA000008    ;                 B       end2
00000170:             ; else1
00000170:             ; ; print("This person will be " + str(age) + " on " + str(bDay) + "/" + str(bMonth) + "/" + str(
                      ; year))
00000170: E24F00C5    ;                 ADRL    R0, willbe
00000174: EF000003    ;                 SVC     print_str
00000178: E1A00005    ;                 MOV     R0, R5
0000017C: EF000004    ;                 SVC     print_no
00000180: E24F00F2    ;                 ADRL    R0, on
00000184: EF000003    ;                 SVC     print_str
00000188: E92D4000    ;                 push {LR}
0000018C: EB000002    ;                 BL printDate
00000190: E8BD4000    ;                 pop {LR}
00000194:             ;                 
00000194:             ; 
00000194:             ; 
00000194:             ; ; }// end of printAgeHistory
00000194:             ; end2            
00000194: E8BD0070    ;                 LDMFD SP!, {R4-R6}
00000198:             ;                 ;POP    {R4}            ; callee saved registers
00000198:             ;                 ;POP    {R5}
00000198:             ;                 ;POP    {R6}
00000198: E1A0F00E    ;                 MOV     PC, LR
0000019C:             ; 
0000019C:             ; printDate
0000019C: E1A00006    ;                 MOV     R0, R6
000001A0: EF000004    ;                 SVC     print_no
000001A4: E3A0002F    ;                 MOV     R0, #'/'
000001A8: EF000000    ;                 SVC     print_char
000001AC: E1A00001    ;                 MOV     R0, R1
000001B0: EF000004    ;                 SVC     print_no
000001B4: E3A0002F    ;                 MOV     R0, #'/'
000001B8: EF000000    ;                 SVC     print_char
000001BC: E1A00004    ;                 MOV     R0, R4
000001C0: EF000004    ;                 SVC     print_no
000001C4: E3A0000A    ;                 MOV     R0, #cLF
000001C8: EF000000    ;                 SVC     print_char
000001CC: E1A0F00E    ;                 MOV PC, LR
000001D0:             ; 
000001D0: 41 6E 6F 74 ; another         DEFB    "Another person",10,0
000001D4: 68 65 72 20 ; 
000001D8: 70 65 72 73 ; 
000001DC: 6F 6E 0A 00 ; 
000001E0:             ;                 ALIGN
000001E0:             ; 
000001E0:             ; ; def main():
000001E0:             ; main
000001E0: E59F40A8    ;         LDR     R4, =&12345678          ; Test value - not part of Java compilation
000001E4: E1A05004    ;         MOV     R5, R4                  ; See later if these registers corrupted
000001E8: E1A06004    ;         MOV     R6, R4
000001EC:             ; 
000001EC:             ; ; printAgeHistory(pDay, pMonth, 2000)
000001EC: E51FA12C    ;                 LDR R10, pDay
000001F0: E51FB12C    ;                 LDR R11, pMonth
000001F4: E3A0CE7D    ;                 MOV R12, #2000
000001F8: EBFFFFB5    ;                 BL      printAgeHistory
000001FC:             ;                 
000001FC:             ; 
000001FC:             ; ; print("Another person");
000001FC: E24F0034    ;                 ADRL    R0, another
00000200: EF000003    ;                 SVC     print_str
00000204:             ; 
00000204:             ; ; printAgeHistory(13, 11, 2000)
00000204:             ;                 ;MOV    R0, #13
00000204:             ;                 ;PUSH   {R0}                    ; Stack first parameter
00000204:             ;                 ;MOV    R0, #11
00000204:             ;                 ;STR    R0, [SP, #-4]!          ; An explicit coding of PUSH
00000204:             ;                 ;MOV    R0, #2000
00000204:             ;                 ;STMFD  SP!, {R0}               ; The STore Multiple mnemonic for PUSH {R0}
00000204: E51FA144    ;                 LDR R10, pDay
00000208: E51FB144    ;                 LDR R11, pMonth
0000020C: E3A0CE7D    ;                 MOV R12, #2000
00000210: EBFFFFAF    ;                 BL      printAgeHistory
00000214:             ;                 ;POP    {R0}                    ; Deallocate three 32-bit variables
00000214:             ;                 ;POP    {R0}
00000214:             ;                 ;POP    {R0}
00000214:             ; 
00000214:             ;         ; Now check to see if register values intact (Not part of Java)
00000214: E59F0074    ;         LDR     R0, =&12345678          ; Test value
00000218: E1540000    ;         CMP     R4, R0                  ; Did you preserve these registers?
0000021C: 01550000    ;         CMPEQ   R5, R0                  ;
00000220: 01560000    ;         CMPEQ   R6, R0                  ;
00000224:             ; 
00000224: 128F0014    ;         ADRLNE  R0, whoops1             ; Oh dear!
00000228: 1F000003    ;         SVCNE   print_str               ;
0000022C:             ; 
0000022C: E24F0F72    ;         ADRL    R0, _stack              ; Have you balanced pushes & pops?
00000230: E15D0000    ;         CMP     SP, R0                  ;
00000234:             ; 
00000234: 128F002A    ;         ADRLNE  R0, whoops2             ; Oh no!!
00000238: 1F000003    ;         SVCNE   print_str               ; End of test code
0000023C:             ; 
0000023C:             ; ; }// end of main
0000023C: EF000002    ;                 SVC     stop
00000240:             ; 
00000240:             ; 
00000240: 0A 2A 2A 20 ; whoops1         DEFB    "\n** BUT YOU CORRUPTED REGISTERS!  **\n", 0
00000244: 42 55 54 20 ; 
00000248: 59 4F 55 20 ; 
0000024C: 43 4F 52 52 ; 
00000250: 55 50 54 45 ; 
00000254: 44 20 52 45 ; 
00000258: 47 49 53 54 ; 
0000025C: 45 52 53 21 ; 
00000260: 20 20 2A 2A ; 
00000264: 0A 00       ; 
00000266: 0A 2A 2A 20 ; whoops2         DEFB    "\n** BUT YOUR STACK DIDN'T BALANCE!  **\n", 0
0000026A: 42 55 54 20 ; 
0000026E: 59 4F 55 52 ; 
00000272: 20 53 54 41 ; 
00000276: 43 4B 20 44 ; 
0000027A: 49 44 4E 27 ; 
0000027E: 54 20 42 41 ; 
00000282: 4C 41 4E 43 ; 
00000286: 45 21 20 20 ; 
0000028A: 2A 2A 0A 00 ; 
0000028E:             ; 
0000028E: 00 00       ; (padding)
00000290: 12345678    ; Remaining literals

Symbol Table: Labels
: print_char                        00000000  Value
: stop                              00000002  Value
: print_str                         00000003  Value
: print_no                          00000004  Value
: cLF                               0000000A  Value
: _stack                            0000006C  Local -- ARM
: wasborn                           0000006C  Local -- ARM
: was                               00000085  Local -- ARM
: on                                00000096  Local -- ARM
: is                                0000009B  Local -- ARM
: today                             000000AB  Local -- ARM
: willbe                            000000B3  Local -- ARM
: pDay                              000000C8  Local -- ARM
: pMonth                            000000CC  Local -- ARM
: pYear                             000000D0  Local -- ARM
: printAgeHistory                   000000D4  Local -- ARM
: loop1                             00000104  Local -- ARM
: end1                              00000140  Local -- ARM
: else1                             00000170  Local -- ARM
: end2                              00000194  Local -- ARM
: printDate                         0000019C  Local -- ARM
: another                           000001D0  Local -- ARM
: main                              000001E0  Local -- ARM
: whoops1                           00000240  Local -- ARM
: whoops2                           00000266  Local -- ARM
